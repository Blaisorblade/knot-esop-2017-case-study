-: absurd_tsa
    (sub_tp_trans
       D
       _)
    F
    <- absurd_tsa D F.
-: absurd_tsa
    (sub_tp_trans
       D
       _)
    F
    <- absurd_fsa D F.
-: absurd_tsa
    (sub_tp_trans
       _
       D)
    F
    <- absurd_tsa D F.
-: absurd_fsa
    (sub_tp_trans
       D
       _)
    F
    <- absurd_tsa D F.
-: absurd_fsa
    (sub_tp_trans
       D
       _)
    F
    <- absurd_fsa D F.
-: absurd_fsa
    (sub_tp_trans
       _
       D)
    F
    <- absurd_fsa D F.
-: absurd_tsf
    (sub_tp_trans D _)
    F
    <- absurd_tsf D F.
-: absurd_tsf
    (sub_tp_trans _ D)
    F
    <- absurd_tsf D F.
-: absurd_tsf
    (sub_tp_trans _ D)
    F
    <- absurd_tsa D F.
-: absurd_asf
    (sub_tp_trans D _)
    F
    <- absurd_asf D F.
-: absurd_asf
    (sub_tp_trans _ D)
    F
    <- absurd_asf D F.
-: absurd_asf
    (sub_tp_trans D _)
    F
    <- absurd_tsf D F.
-: absurd_ota
    (of_sub D _)
    F
    <- absurd_tsa D F.
-: absurd_ota
    (of_sub D _)
    F
    <- absurd_fsa D F.
-: absurd_ota
    (of_sub _ D)
    F
    <- absurd_ota D F.
-: absurd_oaf
    (of_sub D _)
    F
    <- absurd_tsf D F.
-: absurd_oaf
    (of_sub D _)
    F
    <- absurd_asf D F.
-: absurd_oaf
    (of_sub _ D)
    F
    <- absurd_oaf D F.
-: invert_sub_arrow
    sub_tp_refl
    sub_tp_refl
    sub_tp_refl.
-: invert_sub_arrow
    (sub_tp_arrow S2sub T1sub)
    T1sub
    S2sub.
-: invert_sub_arrow
    (sub_tp_trans
       T'sub
       Tsub)
    (sub_tp_trans
       U1sub
       T1sub)
    (sub_tp_trans
       U2sub
       S2sub)
   <- invert_sub_arrow Tsub U1sub S2sub
   <- invert_sub_arrow T'sub T1sub U2sub.
-: invert_sub_arrow
    (sub_tp_trans
       D
       _)
    T1sub
    S2sub
    <- absurd_fsa D F
    <- raa_sub_tp F T1sub
    <- raa_sub_tp F S2sub.
-: invert_sub_arrow
    (sub_tp_trans
       D
       _)
    T1sub
    S2sub
    <- absurd_tsa D F
    <- raa_sub_tp F T1sub
    <- raa_sub_tp F S2sub.
-: invert_sub_forall
    (sub_tp_forall
       S2sub
       T1sub)
    T1sub
    S2sub.
-: invert_sub_forall
    sub_tp_refl
    sub_tp_refl
    ([x][d] sub_tp_refl).
-: invert_sub_forall
    (sub_tp_trans
       T'sub
       Tsub)
    (sub_tp_trans
       U1sub
       T1sub)
    ([x][d] sub_tp_trans
       (U2sub x d)
       (S2sub x
	  (sub_tp_trans T1sub d)))
   <- invert_sub_forall Tsub U1sub S2sub
   <- invert_sub_forall T'sub T1sub U2sub.
-: invert_sub_forall
    (sub_tp_trans
       _
       D)
    T1sub
    S2sub
    <- absurd_fsa D F
    <- raa_sub_tp F T1sub
    <- raa_sub_imp_sub F S2sub.
-: invert_sub_forall
    (sub_tp_trans
       D
       _)
    T1sub
    S2sub
    <- absurd_tsf D F
    <- raa_sub_tp F T1sub
    <- raa_sub_imp_sub F S2sub.
%worlds () (invert_sub_forall _ _ _).
%total (Dsub) (invert_sub_forall Dsub _ _).
invert_of_abs : of (abs S1 E) (arrow T1 T2)
	  -> ({x} of x S1 -> of (E x) S2)
	  -> sub_tp T1 S1
	  -> sub_tp S2 T2
	  -> type.
%mode invert_of_abs +X1 -X2 -X3 -X4.
-: invert_of_abs
    (of_abs
       ([x][xassm] Eof x xassm))
    Eof
    sub_tp_refl
    sub_tp_refl.
-: invert_of_abs
    (of_sub
       Dsub
       Eof)
    Eof'
    (sub_tp_trans T1sub U1sub)
    (sub_tp_trans U2sub S2sub)
    <- invert_of_abs Eof Eof' T1sub S2sub
    <- invert_sub_arrow Dsub U1sub U2sub.
-: invert_of_abs
    (of_sub
       D
       _)
    Eof'
    T1sub
    S2sub
    <- absurd_tsa D F
    <- raa_of_imp_of F (Eof' : {x}{d} of _ top)
    <- raa_sub_tp F T1sub
    <- raa_sub_tp F S2sub.
-: invert_of_abs
    (of_sub
       D
       _)
    Eof'
    T1sub
    S2sub
    <- absurd_fsa D F
    <- raa_of_imp_of F (Eof' : {x}{d} of _ top)
    <- raa_sub_tp F T1sub
    <- raa_sub_tp F S2sub.
-: invert_of_tabs
    (of_tabs
       ([x][xsub] Eof x xsub))
    Eof
    sub_tp_refl
    ([x][d] sub_tp_refl).
-: invert_of_tabs
    (of_sub
       Tsub
       Eof)
    Eof'
    (sub_tp_trans U1sub T1sub)
    ([x][d] sub_tp_trans
       (U2sub x d)
       (S2sub x
	  (sub_tp_trans T1sub d)))
    <- invert_of_tabs Eof Eof' U1sub S2sub
    <- invert_sub_forall Tsub T1sub U2sub.
-: invert_of_tabs
    (of_sub D _)
    Eof'
    T1sub
    S2sub
    <- absurd_tsf D F
    <- raa_sub_imp_of F (Eof' : {x}{d} of _ top)
    <- raa_sub_tp F T1sub
    <- raa_sub_imp_sub F S2sub.
-: invert_of_tabs
    (of_sub D _)
    Eof'
    T1sub
    S2sub
    <- absurd_asf D F
    <- raa_sub_imp_of F (Eof' : {x}{d} of _ top)
    <- raa_sub_tp F T1sub
    <- raa_sub_imp_sub F S2sub.
-: app_progresses
    (of_sub
       _
       Eof)
    E1prog
    E2prog
    E3prog
    <- app_progresses Eof E1prog E2prog E3prog.
-: app_progresses
    _
    (progresses_steps E1step)
    _
    (progresses_steps (step_app_fun E1step)).
-: app_progresses
    (of_app
       E2of
       E1of)
    (progresses_value E1val)
    (progresses_steps E2step)
    (progresses_steps (step_app_arg E2step E1val)).
-: app_progresses
    (of_app
       E2of
       E1of)
    (progresses_value E1val)
    (progresses_value E2val)
    (progresses_steps step_app).
-: app_progresses
    (of_app
       _
       E1of)
    _
    _
    D
    <- absurd_ota E1of F
    <- raa_progresses F D.
-: tapp_progresses
    (of_sub
       _
       Eof)
    Eprog
    E'prog
    <- tapp_progresses Eof Eprog E'prog.
-: tapp_progresses
    _
    (progresses_steps Estep)
    (progresses_steps (step_tapp_fun Estep)).
-: tapp_progresses
    (of_tapp
       E2of
       E1of)
    (progresses_value Eval)
    (progresses_steps step_tapp).
-: tapp_progresses
    (of_tapp
       _
       Eof)
    _
    D
    <- absurd_oaf Eof F
    <- raa_progresses F D.
-: preservation
    (of_sub
       Ssub
       Eof)
    Estep
    (of_sub
       Ssub
       E'of)
    <- preservation Eof Estep E'of.
-: preservation
    (of_app
       E2of
       E1of)
    step_app
    (of_sub
       S2sub
       (E1of'
	  _
	  (of_sub
	     T1sub
	     E2of)))
    <- invert_of_abs E1of E1of' T1sub S2sub.
-: preservation
    (of_app
       E2of
       E1of)
    (step_app_fun
       E1step)
    (of_app
       E2of
       E1of')
    <- preservation E1of E1step E1of'.
-: preservation
    (of_app
       E2of
       E1of)
    (step_app_arg
       E2step
       _)
    (of_app
       E2of'
       E1of)
    <- preservation E2of E2step E2of'.
-: preservation
    (of_tapp
       T2sub
       Eof)
    (step_tapp_fun
       Estep)
    (of_tapp
       T2sub
       Eof')
    <- preservation Eof Estep Eof'.
-: preservation
    (of_tapp
       T2sub
       Eof)
    step_tapp
    (of_sub
       (S2sub _ T2sub)
       (Eof'
	  _
	  (sub_tp_trans
	     T1sub
	     T2sub)))
    <- invert_of_tabs Eof Eof' T1sub S2sub.
-: progress
    (of_sub
       _
       Eof)
    Eprogress
    <- progress Eof Eprogress.
-: progress
    (of_abs
       _)
    (progresses_value
       value_abs).
-: progress
    (of_tabs
       _)
    (progresses_value
       value_tabs).
-: progress
    (of_app
       E2of
       E1of)
    Eprog
    <- progress E1of E1prog
    <- progress E2of E2prog
    <- app_progresses (of_app E2of E1of) E1prog E2prog Eprog.
-: progress
    (of_tapp
       Tsub
       Eof)
    E'prog
    <- progress Eof Eprog
    <- tapp_progresses (of_tapp Tsub Eof) Eprog E'prog.
